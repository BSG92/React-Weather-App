import { createContext, useState } from "react";

export interface AccentColorContextType {
	color: string | undefined;
	changeAccentColor: (color: string | undefined) => void;
}

export const List_ColorAccent = ['rose','sky','green','teal','orange','yellow','violet','indigo'];

// export const TemperatureContext = createContext<TemperatureTypes | undefined>(undefined);
export const AccentColorContext = createContext<AccentColorContextType | undefined>(undefined);

export const AccentColorProvider = ({ children }: any) => {
	const storedAccentColor = localStorage.getItem("accent_color");
	let _accentColor;
	if (storedAccentColor && List_ColorAccent.includes(storedAccentColor)) {
		_accentColor = storedAccentColor;
	} else {
		_accentColor = List_ColorAccent[0];
	}

	const [accentColor, setAccentColor] = useState<string | undefined>(_accentColor);

	const changeAccentColor = (color: string | undefined) => {
        if(color && List_ColorAccent.includes(color)){
            setAccentColor(color);
            localStorage.setItem("accent_color", color);
        }else{
            console.log('no color in list')
        }
	};

	return (
		<AccentColorContext.Provider value={{ color: accentColor, changeAccentColor: changeAccentColor }}>
			{children}
		</AccentColorContext.Provider>
	);
};
